= Android Bootcamp Training

14 December 2015

*Marius Mailat*, +<marius.mailat@gmail.com>+
http://thewnewcircle.com[The New Circle, Inc.]

== Obtaining Course Materials

You can either clone this Git repository:

  git clone git://github.com/mailat/bootcamp-2015-12-14.git

or

   download a Zip archive by clicking the link at the top of the page or using the link: https://github.com/mailat/bootcamp-2015-12-14/zipball/master

== Useful Links

Git book: http://git-scm.com/book

Marakana Java Fundamentals Tutorial: http://marakana.com/bookshelf/java_fundamentals_tutorial/index.html

Introduction to Eclipse - Driving Java Productivity: http://mrkn.co/s/video_introduction_to_eclipse_driving_java_productivity,595/index.html

Java Tutorial http://docs.oracle.com/javase/tutorial/

Gradle NDK Experimental plugin transition - http://tools.android.com/tech-docs/new-build-system/gradle-experimental

Offical samples NDK - https://github.com/googlesamples/android-ndk

Xavier Hallade on NDK - http://www.youtube.com/watch?v=okLKfxfbz40

NDK Integration - http://ph0b.com/android-studio-gradle-and-ndk-integration/

Gradle NDK Experimental plugin - http://de.slideshare.net/ph0b/mastering-the-ndk-with-android-studio-and-the-gradleexperimental-plugin

Hackathon app from Droidcon London 2015 - https://github.com/mailat/dina12

Classy Shark - https://github.com/google/android-classyshark

== What should you start after finishing the training?

- Android Dev Summit coding labs 2015 - https://www.code-labs.io/android-dev-summit

== Homework Day 01

- Finish the lab activity in Labs_Bootcamp_Slides.html (Page 2)
- Have a Button which opens the Starwars cinema ticket
- Create a second activity names SecondActivity and start the second activity from StatusActivity.

== Homework Day 02

- Start/Finish the lab activity in Labs_Bootcamp_Slides.html (Page 27 - preferences)
- Create AsyncTask in StatusActivity (entry in the options menu "Manual refresh") and display the results in a TextView (optional in a ListView). Add optional a Spinner for the progress of the connection.
- Create a broadcast receiver for the Internet Connection ON, in case we receive internet we just START the RefreshService.class

== Homework Day 03

- Finish the lab activity in Labs_Bootcamp_Slides.html related to the Content Provider
- Create a Dialog in Android similar with the one from the link http://goo.gl/TMydaO. Use a new class AlertDialog extending the Dialog with a custom XML layout.

Solution bellow:


	public class ErrorDialog extends Dialog {
		Button close;
		
		public ErrorDialog(Context context, String message) {
			super(context, R.style.FullHeightDialog);
			this.setContentView(R.layout.inf_confirmation_type_2);
	    	
	    	TextView errorTitle = (TextView) this.findViewById(R.id.success_title);
	    	errorTitle.setText( context.getResources( ).getText(R.string.error_title).toString( ) );
	    	
	    	TextView confirmYes = (TextView) this.findViewById(R.id.success_message);
	    	confirmYes.setText( message );
	    	
	    	close = (Button) this.findViewById(R.id.confirm_close);
	    	close.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View v) {
		    		ErrorDialog.this.dismiss( );
				}
			});
		}	

the content of the inf_confirmation_type_2.xml will be in this case:

	<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
		android:layout_width="wrap_content" 
		android:layout_height="270dip"
	 	android:orientation="vertical"
		android:background="?background">

		<FrameLayout android:layout_width="fill_parent"
			android:layout_height="wrap_content" 
			android:padding="10sp">
			
			<ImageView android:src="?menu_aboutus_small"
				android:layout_width="wrap_content" 
				android:layout_height="wrap_content"
				android:scaleType="fitXY" />
			<TextView android:id="@+id/success_title" 
				android:layout_width="fill_parent"
				android:layout_height="wrap_content" 
				android:textColor="?font_color"
				android:textSize="17sp" 
				android:layout_gravity="center"
				android:gravity="center" 
				android:text="@string/success_title" />
		</FrameLayout>		
				
		<TextView android:id="@+id/success_message"
			android:layout_width="fill_parent"
			android:layout_height="wrap_content" 
			android:textColor="?font_color"
			android:layout_gravity="center"
			android:gravity="center"
			android:layout_weight="0.7"
			android:layout_marginBottom="10dip" />
		
		<LinearLayout android:layout_width="fill_parent"
			android:layout_height="wrap_content" 
			android:layout_marginBottom="10sp"
			android:padding="10sp">
			
			<Button android:id="@+id/confirm_close"
				android:layout_width="fill_parent" 
				android:layout_height="wrap_content" 
				android:text="@string/confirmation_CloseButtonText"
				android:textColor="?font_color" 
				android:textStyle="bold" 					
				android:background="@drawable/custom_button"		
				android:padding="10sp" />
		</LinearLayout>		
	 
	</LinearLayout>

- Optional: Recreate the IntentService as a Service with a thread in it. Try to run it more than once.

== Homework Day 04

- Convert the example to use the Experimental Gradle plugin as described on http://tools.android.com/tech-docs/new-build-system/gradle-experimental

== Homework Day 05

- Complete the 2hr Testing Coding Lab from Android Dev Summit - https://goo.gl/NWYvcx To understand how to write unit tests for Android using JUnit4, Espresso and the Android Testing Support Library and generating Code Coverage reports